import java.util.Calendar
import org.joda.time.DateTime
import org.joda.time

var Timer timer = null
var long last_change = now.millis

rule 	"AudioChannel"
when
	Item audio changed to ON or
	Thing "chromecast:audio:2e7f499f3e1069b46d7d5a8bfdb96607" changed or
	Thing "chromecast:audiogroup:c7b1bd14-e90f-4987-b2bf-3d2401f2f01e" changed or
	Item CC_Keuken_Player changed to PLAY or
	Item CC_Beneden_Alle_Player changed to PLAY
then
	if (tv.state == OFF){
		audio.sendCommand(ON)
		Thread::sleep(2500)
		HarmonyAudio.sendCommand("InputCd")
		logInfo("Audio", "AudioChannel to CD completed")
	}else{logInfo("Audio","TV on not changing audio channel")}
end

rule "Chromecasts"
when
	Item CC_Living_Player changed from NULL to PLAY or
        Item CC_Living_Player changed from STOP to PLAY or
        Item CC_Keuken_Player received update PLAY or
        Item CC_Keuken_Player changed from STOP to PLAY or
        Item CC_Beneden_Alle_Player received update PLAY or
        Item CC_Beneden_Alle_Player changed from STOP to PLAY or
        Item CC_Beneden_Alle_Player changed from PAUSE to PLAY

then 
        logInfo("CCastSetVol","CC_Living_Player.state " + CC_Living_Player.state.toString)
        logInfo("CCastSetVol","CC_Keuken_Player.state " + CC_Keuken_Player.state.toString)
        logInfo("CCastSetVol","CC_Beneden_Alle_Player.state " + CC_Beneden_Alle_Player.state.toString)
end


rule "LivingRoom Lights morning"
when
        Time cron "0 20 6 ? * MON,TUE,WED * ?" or
        Time cron "0 0 7 ? * THU,FRI,SAT,SUN * ?" 
then
        logInfo("LIVING LIGHTS MORNING","TURN DAYLIGHT ON " + vloerlamp_woonkamer.state)
	sendCommand(vloerlamp_woonkamer, 85.00)
        Thread::sleep(300)
	sendCommand(keukenWandLamp, 65)
        Thread::sleep(300)
        sendCommand(toio,ON)
end

rule "darkness"
when
        Time cron "0 0/10 15-22 1/1 * ? * ?" or
        Time cron "0 0/10 06-11 1/1 * ? * ?" or 
	Item Test changed
then
val Number devider = 1500
val Number multiplier = 180
var Number dayLength = totalDayLight.state
var int seasonOffset = (((dayLength/devider)*multiplier)/1).intValue*1
var int seasonOffsetM = (180-seasonOffset)
var hourOfDay = now.getHourOfDay
if (darkness.state === NULL || daylight.state === NULL) 
{
	if (hourOfDay > 14){
	sendCommand(darkness, ON) 
	sendCommand(daylight, OFF)
	logInfo("state NULL FOUND","darkness on daylight off" + darkness.state + daylight.state + hourOfDay)
	}
	else{
        sendCommand(darkness, OFF)
        sendCommand(daylight, ON)
        logInfo("state NULL FOUND","darkness off daylight on" + darkness.state + daylight.state + hourOfDay)
	}
}

if (Condition.state == "Mostly Cloudy" || Condition.state == "Overcast" || Condition.state == "Light Rain" ||
Condition.state == "Heavy Rain" || Condition.state == "Haze" || Condition.state == "Fog" || Condition.state == "Snow" || Condition.state == "Chance of Rain" || Condition.state == "UNDEF")       seasonOffset = (seasonOffset + 60)

if ((now.plusMinutes(seasonOffset).isAfter((Sunset_TimeOld.state as DateTimeType).calendar.timeInMillis))&& darkness.state == OFF && (hourOfDay > 14))
        {
        logInfo("DARKNESS", "turned ON " + now.plusMinutes(seasonOffset) + " after Sunset time " +
Sunset_TimeOld.state + " Weather: " +Condition.state + " seasonOffset = "+ seasonOffset+ " darkness = "+ darkness.state + " HourOfDay = " + hourOfDay)
        sendCommand(daylight, OFF)
	Thread::sleep(300)
	sendCommand(darkness, ON)
}else{
        logInfo("DARKNESS", "not turned ON")
}
if ((now.minusMinutes(seasonOffsetM).isAfter((Sunrise_TimeOld.state as DateTimeType).calendar.timeInMillis))&& daylight.state == OFF && (hourOfDay < 11))
                {
                logInfo("DAYLIGHT", "turned ON " + now.minusMinutes(seasonOffsetM) + " after Sunrise time " +
Sunrise_TimeOld.state + " Weather: " +Condition.state + " seasonOffsetM = "+ seasonOffsetM+ " DAYLIGHT = "+ daylight.state + " HourOfDay = " + now.hourOfDay)
        sendCommand(darkness, OFF)        
	Thread::sleep(300)
	sendCommand(daylight, ON)
}else{
          logInfo("DAYLIGHT", "not turned ON")
}
end

rule "LivingRoom Lights ON"
when
	Item darkness changed from OFF to ON
then
	logInfo("LIVING LIGHTS","Apparently its dark now, LIGHTS ON")
        sendCommand(keukenWandLamp, 60)
        Thread::sleep(300)
	sendCommand(vloerlamp_woonkamer, 55.00)
        Thread::sleep(300)
        sendCommand(toio,ON)
        Thread::sleep(300)
        sendCommand(keukenWandLamp, 60)
        Thread::sleep(300)
       	sendCommand(buitenlamp_achtertuin, 75.00)
        Thread::sleep(300)
        sendCommand(buitenlamp_voordeur, 70.00)
end

rule "LivingRoom Lights OFF"
when
        Item daylight changed from OFF to ON
then
        logInfo("LIVING LIGHTS","Apparently its light now, LIGHTS OFF")
        sendCommand(keukenWandLamp, OFF)
        Thread::sleep(300)
        sendCommand(vloerlamp_woonkamer,OFF)
        Thread::sleep(300)
        sendCommand(toio,OFF)
        Thread::sleep(300)
        sendCommand(keukenWandLamp, OFF)
        Thread::sleep(300)
        sendCommand(buitenlamp_achtertuin, OFF)
        Thread::sleep(300)
        sendCommand(buitenlamp_voordeur, OFF)
end

rule "Presence to OFF check" 
when
	Time cron "0 0/20 * 1/1 * ? * ?" 
then
        if (SensorActivity_Hallway.state === NULL || SensorActivity_Hallway.state == "") {SensorActivity_Hallway.postUpdate(new DateTimeType(Calendar::getInstance()))}
        if (Presence.state == ON)
        {
                if(
		phone_Mau.state == OFF && phone_Ju.state == OFF 
		&& (now.minusMinutes(45).isAfter((SensorActivity_Hallway.state as DateTimeType).calendar.timeInMillis))
		&& (now.minusMinutes(45).isAfter((Mau_LastSeen.state as DateTimeType).calendar.timeInMillis)) 
		&& (now.minusMinutes(45).isAfter((Ju_LastSeen.state as DateTimeType).calendar.timeInMillis))
		)
		 {
                        logInfo("PresenceCheck", "Presence to OFF, no phones for 45mins within reach and last registered activity at " + SensorActivity_Hallway.state)
                                sendCommand(Presence, OFF)
                }else
        		{logInfo("PresenceCheck", "Presence ON, phones MauJu states: " + phone_Mau.state +phone_Ju.state)}
        }
        else
        	{logInfo("PresenceCheck", "Presence undefined or Presence NOT ON")}
end 

rule "Presence to ON check" 
when
	Item phone_Mau changed to ON or
	Item phone_Ju changed to ON
then
	var String whoIsHome = "nobody"
	if (phone_Mau.state == ON) {whoIsHome = "Maurice"}
	if (phone_Ju.state == ON) {whoIsHome = "Judith"}
	if (phone_Mau.state == ON && phone_Ju.state == ON) {whoIsHome = "Both"}
        if ((phone_Mau.state == ON || phone_Ju.state == ON) && (Presence.state != ON)) {
                logInfo("PresenceCheck", "Presence to ON, back home is " + whoIsHome)
                sendCommand(Presence, ON)
 	var DateTime testme = now.plusMinutes(0)
        	lastHallMovement.postUpdate(new DateTimeType(testme.toString))
	logInfo("PresenceCheck","Last movement updated to " + lastHallMovement.state)
        }else {logInfo("PresenceCheck", " " + whoIsHome + "s phone on local network")}
end 


rule "halPIR motion restart timer"
when
        Item halPIR changed to ON
then
	if(timer===null) {
            sendCommand(halPIR, ON)
            logInfo("HALL SENSOR","HALPIR Triggered - timer NULL start timer halMotion ON")
		timer = createTimer(now.plusSeconds(120)) [|
                sendCommand(halPIR, OFF)
                timer.cancel
                timer = null
		]
	}
        if(timer!==null) {
                timer.cancel
                timer = null
                logInfo("HALL SENSOR","HALPIR Triggered - cancel timer - starting new timer")
                timer = createTimer(now.plusSeconds(120)) [|
                sendCommand(halPIR, OFF)
            ]
        }else{logInfo("HALL SENSOR","halPIR changed to ON timer not null or null - but doing fuck all") }
end

rule "SensorActivity_Hallway postUpdate"
when 
 Item halPIR received update
then
 val DateTime test = now.plusMinutes(0)

        logInfo("HALL SENSOR","Last movement now at " + lastHallMovement.state)
        lastHallMovement.postUpdate(new DateTimeType(test.toString))
	SensorActivity_Hallway.postUpdate(new DateTimeType(Calendar::getInstance()))
	if(Presence.state == OFF && halPIR.state == ON){
	logInfo("HALL SENSOR","WEIRD WTF presence off and hallMotion on")
	}
end


rule "LivingRoom Lights dim"
when 
        Time cron "0 30 22 1/1 * ? * ?" or
        Time cron "0 35 19 1/1 * ? * ?"
then

	if (keukenWandLamp.state > 40){
        sendCommand(keukenWandLamp, 40)
        Thread::sleep(300)
        sendCommand(vloerlamp_woonkamer, 10.00)
        Thread::sleep(300)
        sendCommand(keukenWandLamp, 40)
        Thread::sleep(300)
        logInfo("LIVING LIGHTS DIM EVENING","Dim them")
	} else{
        sendCommand(keukenWandLamp, 30)
        Thread::sleep(300)
	sendCommand(vloerlamp_woonkamer, 5.00)
        Thread::sleep(300)
        sendCommand(keukenWandLamp, 30)
        Thread::sleep(300)
        logInfo("LIVING LIGHTS DIM MORNING","Dim them")
	}
end


rule "living lights off"
when
	Time cron "0 52 23 1/1 * ? * ?"
then
	sendCommand(keukenWandLamp, 0)
	Thread::sleep(300)	
	sendCommand(vloerlamp_woonkamer, OFF)
        Thread::sleep(300)
        sendCommand(toio,OFF)
        Thread::sleep(300)
        sendCommand(keukenWandLamp, 0)
        Thread::sleep(300)
	logInfo("LIVING LIGHTS OFF","OFF")
end

rule "Receiver on when tv on" 
when
        Item tv changed 
then
        if (tv.state == OFF){
                sendCommand(audio, OFF)
		tvState.postUpdate("")
                logInfo("Receiver","TV OFF received - Receiver off ")
        }else{
                sendCommand(audio, ON)
		Thread::sleep(2000)
                logInfo("Receiver","TV ON - turn Receiver to TV channel")
		HarmonyAudio.sendCommand("InputTV")
        }
end

rule "Check last activity"
when
    Item Presence changed to OFF
then

        if (now.minusMinutes(45).isAfter((SensorActivity_Hallway.state as DateTimeType).calendar.timeInMillis)) {
	logInfo("HALL SENSOR","Last activity over 1hr ago at "+ SensorActivity_Hallway.state + " Presence " + Presence.state)
		if(audioKeuken.state == ON && Presence.state == OFF){sendCommand(audioKeuken, OFF)}
        }else {sendCommand(Presence, ON)logInfo("HALL SENSOR","Turn Presence back ON recent activity found "+ SensorActivity_Hallway.state + " Presence " + Presence.state)}
end

rule "Doorbel Front Door" 
when
	Item voordeurBel changed from OFF to ON
then
var garageMotion = "garage"+now.toString ("HH:mm:ss")+".jpg"
                var motionMsg = "door motion detected at "+ now.toString ("HH:mm:ss")
	if (voordeurBel.state == ON && Presence.state == OFF){
		executeCommandLine("wget http://192.168.11.16:88/cgi-bin/CGIProxy.fcgi?usr=garage01&pwd=5056Storiman&cmd=snapPicture2 -O /tmp/"+garageMotion, 1000)
		Thread::sleep(3000)
		sendMail("maurice@andesk.com", "doorbel alert "+now.toString ("HH:mm:ss"), motionMsg, "file:///tmp/" +garageMotion)
	logInfo("voordeurBel", "Doorbel rang closing switch")
	}else{	
		logInfo("voordeurBel", "Doorbel status change, but someone was home or status to off")
		sendCommand(CamMotionAlarm, ON)
	        sendCommand( voordeurBel, OFF)
		}
end

rule "TV state"
when
	Item tvState received command
then
  	sendCommand(tv, ON)
	tv.postUpdate(ON)
        logInfo("HarmonyTV", "Turn on TV and wait")  	

	if (tvState.state == "netFlix")
	{
        logInfo("HarmonyTV", "TV already on switch to Netflix")
        HarmonyTV.sendCommand("SmartHub")
  	Thread::sleep(9000)
  	HarmonyTV.sendCommand("Select")
	}

        if (tvState.state == "cast")
        {
        logInfo("HarmonyTV", "switch to casting")
        HarmonyTV.sendCommand("Source")
        Thread::sleep(3000)
        HarmonyTV.sendCommand("InputHdmi2")
	}

        if (tvState.state == "tv")
        {
        logInfo("HarmonyTV", "switch to tv")
        HarmonyTV.sendCommand("Source")
        Thread::sleep(3000)
        HarmonyTV.sendCommand("InputTv")
        }

        if (tvState.state == "Guide")
        {
        logInfo("HarmonyTV", "switch to Guide")
        HarmonyTV.sendCommand("Guide")
	tvState.postUpdate("TV")
        }
end

rule    "Alexa change inputCD"
when
        Item inputCD changed to ON
then
        if (audio.state == OFF){
                audio.sendCommand(ON)
                Thread::sleep(2500)
                HarmonyAudio.sendCommand("InputCd")
                logInfo("Audio", "AudioChannel to CD completed")
                inputCD.sendCommand(OFF)
        }else{
        HarmonyAudio.sendCommand("InputCd")
        logInfo("Audio","changing audio channel to CD")
        inputCD.sendCommand(OFF)}
end

rule    "Alexa change inputTV"
when
        Item inputTV changed to ON
then
        if (audio.state == OFF){
                audio.sendCommand(ON)
                Thread::sleep(2500)
                HarmonyAudio.sendCommand("InputTv")
                logInfo("Audio", "AudioChannel to TV completed")
                inputTV.sendCommand(OFF)
        }else{
        HarmonyAudio.sendCommand("InputTv")
        logInfo("Audio","changing audio channel to TV")
        inputTV.sendCommand(OFF)}
end
rule "Alexa volume up"
when
        Item HarmonyAudioUp changed to ON
then
                HarmonyAudioUpString.sendCommand("VolumeUp")
                HarmonyAudioUpString.sendCommand("VolumeUp")
                HarmonyAudioUpString.sendCommand("VolumeUp")
                logInfo("Audio", "VolumeUp")
                HarmonyAudioUpString.sendCommand("VolumeUp")
                HarmonyAudioUpString.sendCommand("VolumeUp")
                HarmonyAudioUp.sendCommand(OFF)
end

rule "Alexa volume down"
when
        Item HarmonyAudioDown changed to ON
then
                HarmonyAudioDownString.sendCommand("VolumeDown")
                HarmonyAudioDownString.sendCommand("VolumeDown")
                HarmonyAudioDownString.sendCommand("VolumeDown")
                HarmonyAudioDownString.sendCommand("VolumeDown")
                logInfo("Audio", "VolumeDown")
                HarmonyAudioDownString.sendCommand("VolumeDown")
                HarmonyAudioDown.sendCommand(OFF)
end

rule "Alexa Netflix"
when
        Item HarmonyNetflix changed to ON
then
                logInfo("TV", "Netflix")
        	HarmonyTV.sendCommand("SmartHub")
        	Thread::sleep(3000)
        	HarmonyTV.sendCommand("Select")
                HarmonyNetflix.sendCommand(OFF)
end

rule "Cam MotionAlert"
when
        Item CamMotionAlarm changed
then
                logInfo("CamMotionAlarm", "RED ALERT! Cam MotionAlarm")

var garageMotion = "doorbel"+now.toString ("HH:mm:ss")+".jpg"
var motionMsg = "door motion detected at "+ now.toString ("HH:mm:ss")
executeCommandLine("wget http://192.168.11.16:88/cgi-bin/CGIProxy.fcgi?usr=garage01&pwd=5056Storiman&cmd=snapPicture2 -O /tmp/"+garageMotion, 1000)
Thread::sleep(3000)
sendMail("maurice@andesk.com", "doorbel alert "+now.toString ("HH:mm:ss"), motionMsg, "file:///tmp/" +garageMotion)
sendNotification("mauricefrancke@gmail.com", "garageMotion")
end
