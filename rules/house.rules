import java.util.Calendar
import org.joda.time.DateTime
import org.joda.time

var Timer timer = null
var long last_change = now.millis


rule 	"AudioChannel"
when
	Item Test changed or
	Item CC_Keuken_Player changed or
	Thing "Chromecast:audiogroup:c7b1bd14-e90f-4987-b2bf-3d2401f2f01e" changed from OFFLINE to ONLINE or
	Item audioKeuken changed from OFF to ON
then
	if (tv.state == OFF){
		audio.sendCommand(ON)
		Thread::sleep(2500)
		HarmonyAudio.sendCommand("InputCd")
		logInfo("Audio", "AudioChannel to CD completed")
	}else{logInfo("Audio","TV on not changing audio channel")}
end

rule "Chromecasts"
when
	Item CC_Living_Player changed from NULL to PLAY or
        Item CC_Living_Player changed from STOP to PLAY or
        Item CC_Keuken_Player changed from NULL to PLAY or
        Item CC_Keuken_Player changed from STOP to PLAY or
        Item CC_Beneden_Alle_Player changed from NULL to PLAY or
        Item CC_Beneden_Alle_Player changed from STOP to PLAY or
        Item CC_Beneden_Alle_Player changed from PAUSE to PLAY

then 
        logInfo("CCastSetVol","CC_Living_Player.state " + CC_Living_Player.state.toString)
        logInfo("CCastSetVol","CC_Keuken_Player.state " + CC_Keuken_Player.state.toString)
        logInfo("CCastSetVol","CC_Beneden_Alle_Player.state " + CC_Beneden_Alle_Player.state.toString)
	sendCommand(CC_Living_Volume, 40)
	sendCommand(CC_Keuken_Volume, 50)
        sendCommand(CC_Beneden_Alle_Volume, 40)
end


rule "LivingRoom Lights morning"
when
        Time cron "0 20 6 ? * MON,TUE,WED * ?" or
        Time cron "0 0 7 ? * THU,FRI,SAT,SUN * ?" 
then
	if (vloerlamp_woonkamer.state < 80.00) {
        sendCommand(vloerlamp_woonkamer, 85.00)
        Thread::sleep(300)
	sendCommand(keukenWandLamp, 65)
        Thread::sleep(300)
        sendCommand(toio,ON)
        Thread::sleep(300)
	sendCommand(buitenlamp_achtertuin, OFF)
        logInfo("LIVING LIGHTS MORNING","MORNING ON " + vloerlamp_woonkamer.state)
	}else{
	logInfo("LIVING LIGHTS MORNING","MORNING OF")}
end

rule "darkness"
when
        Time cron "0 0/10 15-22 1/1 * ? * ?" or
        Time cron "0 0/10 06-11 1/1 * ? * ?"
then
val Number devider = 1500
val Number multiplier = 180
var Number dayLength = totalDayLight.state
var int seasonOffset = (((dayLength/devider)*multiplier)/1).intValue*1
var int seasonOffsetM = (180-seasonOffset)
if (darkness.state === NULL) {sendCommand(darkness, OFF)}
if (daylight.state === NULL) {sendCommand(daylight, ON)}

if (Condition.state == "Mostly Cloudy" || Condition.state == "Overcast" || Condition.state == "Light Rain" ||
Condition.state == "Heavy Rain" || Condition.state == "Haze" || Condition.state == "Fog" || Condition.state == "Snow")       seasonOffset = (seasonOffset + 60)

if ((now.plusMinutes(seasonOffset).isAfter((Sunset_TimeOld.state as DateTimeType).calendar.timeInMillis))&& darkness.state == OFF && (now.getHourOfDay > 15))
        {
        logInfo("DARKNESS", "to ON " + now.plusMinutes(seasonOffset) + " after Sunset time " +
Sunset_TimeOld.state + " Weather: " +Condition.state + " seasonOffset = "+ seasonOffset+ " darkness = "+ darkness.state)
        sendCommand(daylight, OFF)
	Thread::sleep(300)
	sendCommand(darkness, ON)
}else{
        logInfo("DARKNESS", "not ON "+ now.plusMinutes(seasonOffset) + " NOT after Sunset " + Sunset_TimeOld.state + " Weather: " +Condition.state + " OR lights already on" + " seasonOffset = "+ seasonOffset+ " darkness = "+ darkness.state)}

if ((now.minusMinutes(seasonOffsetM).isAfter((Sunrise_TimeOld.state as DateTimeType).calendar.timeInMillis))&& daylight.state == OFF && (now.getHourOfDay < 11))
                {
                logInfo("DAYLIGHT", "to ON " + now.minusMinutes(seasonOffsetM) + " after Sunrise time " +
Sunrise_TimeOld.state + " Weather: " +Condition.state + " seasonOffsetM = "+ seasonOffsetM+ " DAYLIGHT = "+ daylight.state)
        sendCommand(darkness, OFF)        
	Thread::sleep(300)
	sendCommand(daylight, ON)
}else{
          logInfo("DAYLIGHT", "not ON "+ now.minusMinutes(seasonOffsetM) + " NOT after Sunrise " + Sunrise_TimeOld.state + " Weather: " +Condition.state + " OR lights already on" + " seasonOffsetM = "+ seasonOffsetM+ " DAYLIGHT = "+ daylight.state)}        
end

rule "LivingRoom Lights ON"
when
	Item darkness changed to ON
then
	logInfo("LIVING LIGHTS","Apparently its dark now, so turning on some lights")
        sendCommand(keukenWandLamp, 60)
        Thread::sleep(300)
	sendCommand(vloerlamp_woonkamer,75.00)
        Thread::sleep(300)
        sendCommand(toio,ON)
        Thread::sleep(300)
        sendCommand(keukenWandLamp, 60)
	Thread::sleep(300)
	sendCommand(kerstboom, ON)
        Thread::sleep(300)
       	sendCommand(buitenlamp_achtertuin, 75.00)
end

rule "LivingRoom Lights OFF"
when
        Item daylight changed to ON
then
        logInfo("LIVING LIGHTS","Apparently its light now, so turning off some lights")
        sendCommand(keukenWandLamp, OFF)
        Thread::sleep(300)
        sendCommand(vloerlamp_woonkamer,OFF)
        Thread::sleep(300)
        sendCommand(toio,OFF)
        Thread::sleep(300)
        sendCommand(keukenWandLamp, OFF)
        Thread::sleep(300)
        sendCommand(buitenlamp_achtertuin, OFF)
end

rule "Presence to OFF check" 
when
	Time cron "0 0/20 * 1/1 * ? * ?" 
then
        if (SensorActivity_Hallway.state === NULL || SensorActivity_Hallway.state == "") {SensorActivity_Hallway.postUpdate(new DateTimeType(Calendar::getInstance()))}
        if (Presence.state == ON)
        {
                if(phone_Mau.state == OFF && phone_Ju.state == OFF && (now.minusMinutes(45).isAfter((SensorActivity_Hallway.state as DateTimeType).calendar.timeInMillis))
		) {
                        logInfo("PresenceCheck", "Presence to OFF, no phones within reach and last registered activity at " + SensorActivity_Hallway.state)
                                sendCommand(Presence, OFF)
        			sendMail("v7f4u3byzz8g@nmamail.net", "Presence" , "Presence changed to off")
                }else
        		{logInfo("PresenceCheck", "Presence ON, phones MauJu states: " + phone_Mau.state +phone_Ju.state)}
        }
        else
        	{logInfo("PresenceCheck", "Presence undefined or Presence NOT ON")}
end 

rule "Presence to ON check" 
when
	Item phone_Mau changed to ON or
	Item phone_Ju changed to ON
then
	var String whoIsHome = "nobody"
	if (phone_Mau.state == ON) {whoIsHome = "Maurice"}
	if (phone_Ju.state == ON) {whoIsHome = "Judith"}
	if (phone_Mau.state == ON && phone_Ju.state == ON) {whoIsHome = "Both"}
        if ((phone_Mau.state == ON || phone_Ju.state == ON) && (Presence.state != ON)) {
                logInfo("PresenceCheck", "Presence to ON, back home is " + whoIsHome)
                sendCommand(Presence, ON)
 	var DateTime testme = now.plusMinutes(0)
        	lastHallMovement.postUpdate(new DateTimeType(testme.toString))
	logInfo("PresenceCheck","Last movement updated to " + lastHallMovement.state)
        }else {logInfo("PresenceCheck", " " + whoIsHome + "s phone on local network")}
end 


rule "halPIR motion restart timer"
when
        Item halPIR changed to ON
then
	if(timer===null) {
            sendCommand(halPIR, ON)
            logInfo("HALL SENSOR","HALPIR Triggered - timer NULL start timer halMotion ON")
		timer = createTimer(now.plusSeconds(120)) [|
                sendCommand(halPIR, OFF)
                timer.cancel
                timer = null
		]
	}
        if(timer!==null) {
                timer.cancel
                timer = null
                logInfo("HALL SENSOR","HALPIR Triggered - cancel timer - starting new timer")
                timer = createTimer(now.plusSeconds(120)) [|
                sendCommand(halPIR, OFF)
            ]
        }else{logInfo("HALL SENSOR","halPIR changed to ON timer not null or null - but doing fuck all") }
end

rule "SensorActivity_Hallway postUpdate"
when 
 Item halPIR received update
then
 val DateTime test = now.plusMinutes(0)

        logInfo("HALL SENSOR","Last movement now at " + lastHallMovement.state)
        lastHallMovement.postUpdate(new DateTimeType(test.toString))
	SensorActivity_Hallway.postUpdate(new DateTimeType(Calendar::getInstance()))
	if(Presence.state == OFF && halPIR.state == ON){
	logInfo("HALL SENSOR","WEIRD WTF presence off and hallMotion on")
	}
end


rule "LivingRoom Lights dim"
when 
        Time cron "0 30 22 1/1 * ? * ?" or
        Time cron "0 05 20 1/1 * ? * ?"
then

	if (keukenWandLamp.state > 40){
        sendCommand(keukenWandLamp, 40)
        Thread::sleep(300)
        sendCommand(vloerlamp_woonkamer, 25.00)
        Thread::sleep(300)
        sendCommand(keukenWandLamp, 40)
        Thread::sleep(300)
        logInfo("LIVING LIGHTS DIM1","Dim them")
	} else{
        sendCommand(keukenWandLamp, 30)
        Thread::sleep(300)
	sendCommand(vloerlamp_woonkamer, 3.00)
        Thread::sleep(300)
        sendCommand(keukenWandLamp, 30)
        Thread::sleep(300)
        logInfo("LIVING LIGHTS DIM2","Dim them")
	}
end


rule "living lights off"
when
	Time cron "0 52 23 1/1 * ? * ?"
then
	sendCommand(keukenWandLamp, 0)
	Thread::sleep(300)	
	sendCommand(vloerlamp_woonkamer, OFF)
        Thread::sleep(300)
        sendCommand(toio,OFF)
        Thread::sleep(300)
        sendCommand(keukenWandLamp, 0)
        Thread::sleep(300)
	logInfo("LIVING LIGHTS OFF","OFF")
	Thread::sleep(300)
	sendCommand(kerstboom, OFF)
end

rule "Receiver on when tv on" 
when
        Item tv changed then
        if (tv.state == OFF){
                sendCommand(audio, OFF)
                logInfo("Receiver","TV OFF received - Receiver off ")
			if (keukenAudio.state == ON){
			HarmonyAudio.sendCommand("InputCd")
			}
        }else{
                sendCommand(audio, ON)
		Thread::sleep(2000)
                logInfo("Receiver","TV ON - turn Receiver on or leaving Receiver on for LP")
		HarmonyAudio.sendCommand("InputTV")
        }
end

rule "Check last activity"
when
    Item Presence changed to OFF
then

        if (now.minusMinutes(45).isAfter((SensorActivity_Hallway.state as DateTimeType).calendar.timeInMillis)) {
	logInfo("HALL SENSOR","Last activity over 1hr ago at "+ SensorActivity_Hallway.state + " Presence " + Presence.state)
		if(audioKeuken.state == ON && Presence.state == OFF){sendCommand(audioKeuken, OFF)}
        }else {sendCommand(Presence, ON)logInfo("HALL SENSOR","Turn Presence back ON recent activity found "+ SensorActivity_Hallway.state + " Presence " + Presence.state)}
end

rule "Doorbel Front Door" 
when
	Item voordeurBel changed from OFF to ON
then
	if (voordeurBel.state == ON && Presence.state == OFF){
        sendMail("v7f4u3byzz8g@nmamail.net", "voordeurBel" , "voordeurBel ging af, niemand thuis")
	logInfo("voordeurBel", "Doorbel rang closing switch")
	}else{logInfo("voordeurBel", "Doorbel status change, but some was home or status to off")
        sendMail("v7f4u3byzz8g@nmamail.net", "voordeurBel" , "voordeurBel ging af, wel thuis")}
        Thread::sleep(1500)
        sendCommand( voordeurBel, OFF)
end

