import java.util.Calendar
import org.joda.time.DateTime
import org.joda.time

var Timer timer = NULL
var long last_change = now.millis

rule "Periodically check presence" 
when
	Time cron "0 0/1 * 1/1 * ? *" 
then
        if (SensorActivity_Hallway.state === NULL || SensorActivity_Hallway.state == "") 
		{
		SensorActivity_Hallway.postUpdate(new DateTimeType(Calendar::getInstance()))
		}
        if (Presence.state == ON)
        {
                if(phoneMaurice.state == OFF && phoneJudith.state == OFF && (now.minusMinutes(45).isAfter((SensorActivity_Hallway.state as DateTimeType).calendar.timeInMillis))
		) {
                        logInfo("PresenceCheck", "Presence to OFF, no phones within reach and last registered activity at" + SensorActivity_Hallway.state)
                                sendCommand(Presence, OFF)
                }
        }
        else
        {logInfo("PresenceCheck", "Presence undefined or, Presence NOT ON")}
end 

rule "Coming home" 
when
        Item gMobiles received update or
	Item phoneMaurice changed or
	Item phoneJudith changed
then
	var String whoIsHome = "nobody"
	if (phoneMaurice.state == ON) {whoIsHome = "Maurice"}
	if (phoneJudith.state == ON) {whoIsHome = "Judith"}
	if (phoneMaurice.state == ON && phoneJudith.state == ON) {whoIsHome = "Both"}
        if(phoneMaurice.state == ON || phoneJudith.state == ON) {
                        logInfo("PresenceCheck", "Presence to ON, back home is " + whoIsHome)
                        sendCommand(Presence, ON)
        }else {logInfo("PresenceCheck", "Presence NOT ON, home is" + whoIsHome)}
end 


rule "halPIR motion restart timer"
when
        Item halPIR changed to ON
then
	if(timer===NULL) {
            sendCommand(zolderMotion, ON)
            logInfo("HALL SENSOR","HALPIR Triggered - timer NULL start timer halMotion ON")
		timer = createTimer(now.plusSeconds(120)) [|
                sendCommand(zolderMotion, OFF)
                timer.cancel
                timer = NULL
		]
	}
        if(timer!==NULL) {
                timer.cancel
                timer = NULL
                logInfo("HALL SENSOR","HALPIR Triggered - cancel timer - starting new timer")
                timer = createTimer(now.plusSeconds(120)) [|
                sendCommand(zolderMotion, OFF)
            ]
        }else{logInfo("HALL SENSOR","halPIR changed to ON timer not null or null - but doing fuck all") }
end

rule "SensorActivity_Hallway postUpdate"
when 
 Item halPIR received update
then
 val DateTime test = now.plusMinutes(0)

        logInfo("HALL SENSOR","Last movement now at " + lastHallMovement.state)
        lastHallMovement.postUpdate(new DateTimeType(test.toString))
	SensorActivity_Hallway.postUpdate(new DateTimeType(Calendar::getInstance()))
	if(Presence.state == OFF && zolderMotion.state == ON){
	logInfo("HALL SENSOR","WEIRD WTF presence off and hallMotion on")
	}
end


rule "LivingRoom Lights dim"
when 
        Time cron "0 45 22 1/1 * ? * ?"
then
        sendCommand(keukenWandLamp, 35)
        Thread::sleep(300)
        logInfo("LIVING LIGHTS DIM","Dim them")
end


rule "living lights off"
when
	Time cron "0 45 23 1/1 * ? * ?"
then
	sendCommand(keukenWandLamp, OFF)
	Thread::sleep(300)	
	sendCommand(woonkamer_vloerlamp, OFF)
	logInfo("LIVING LIGHTS OFF","OFF")
end

rule "Receiver on when tv on" 
when
        Item tv changed then
        if (tv.state == OFF){
                sendCommand(audio, OFF)
                logInfo("Receiver","TV OFF received - Receiver off ")
        }else{
                sendCommand(audio, ON)
                logInfo("Receiver","TV ON - turn Receiver on or leaving Receiver on for LP")
        }
end

rule "Check last activity"
when
    Item Presence changed to OFF
then

        if (now.minusMinutes(45).isAfter((SensorActivity_Hallway.state as DateTimeType).calendar.timeInMillis)) {
	logInfo("HALL SENSOR","Last activity over 1hr ago at "+ SensorActivity_Hallway.state + " Presence " + Presence.state)
		if(audioKeuken.state == ON && Presence.state == OFF){sendCommand(audioKeuken, OFF)}
        }else {sendCommand(Presence, ON)logInfo("HALL SENSOR","Turn Presence back ON recent activity found "+ SensorActivity_Hallway.state + " Presence " + Presence.state)}
end

